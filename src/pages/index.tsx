import { invoke } from "@tauri-apps/api/tauri"
import { ClickCoordinates, ColorValues } from "interfaces/ImageColorPicker"
import { ImageDefaultPickerRGBA } from "interfaces/ImageDefaultPicker"
import type { NextPage } from "next"
import Head from "next/head"
import Image from "next/image"
import { MouseEvent, useEffect, useRef, useState } from "react"
import { SketchPicker } from "react-color"

import Footer from "@/components/Footer"
import { Button } from "@/components/ui/button"
import { CopyToClipboardSvg, CorrectIconSvg, UploadIconSvg } from "@/constants/svgs"

const Home: NextPage = () => {
  const [activeHexColor, setActiveHexColor] = useState<string>("#ADBDBA")
  const [activeRGB, setActiveRGB] = useState<string>("(173, 189, 186)")
  const [file, setFile] = useState("")
  const [base64Img, setBase64Img] = useState("/assets/images/img1.webp")

  const uploadInputRef = useRef<HTMLInputElement | null>(null)
  const [activeVariant, setActiveVariant] = useState<"IMAGE" | "DEFAULT">("IMAGE")

  const onImageClick = (coordinates: ClickCoordinates) => {
    invoke<string>("on_image_clicked", { imageDetails: coordinates })
      .then((value: ColorValues) => {
        setActiveHexColor(value.hex)
        setActiveRGB(value.rgb)
      })
      .catch((err) => {
        console.error(err)
      })
  }

  const onUploadFile = (file: File) => {
    const reader = new FileReader()

    reader.onload = (e) => {
      const base64Image = e.target?.result as string

      setBase64Img(`${base64Img}?timestamp=${Date.now()}`)

      invoke<string>("on_image_uploaded", { base64Image })
        .then((value) => {
          setBase64Img(`${value.slice(9)}?timestamp=${Date.now()}`)
        })
        .catch((err) => {
          console.error(err)
        })
    }

    reader.readAsDataURL(file)
  }

  // Format RGB string from sketch picker to display it
  const formatRGBString = (rgb: ImageDefaultPickerRGBA) => {
    setActiveRGB(`(${rgb.r}, ${rgb.g}, ${rgb.b})`)
  }

  const [hexIsCopiedToClipboard, setHexIsCopiedToClipboard] = useState(false)
  const [RGBIsCopiedToClipboard, setRGBIsCopiedToClipboard] = useState(false)

  const copyToClipboard = (e: MouseEvent<SVGElement | SVGPathElement>) => {
    const clickedElement: SVGElement = (
      e.target.parentNode instanceof SVGElement ? e.target.parentNode : e.target
    ) as SVGElement
    const textToCopy = (clickedElement.previousElementSibling as HTMLSpanElement)
      .innerText
    textToCopy.startsWith("H")
      ? setHexIsCopiedToClipboard(true)
      : setRGBIsCopiedToClipboard(true)
    const textarea = document.createElement("textarea")
    textarea.value = textToCopy
    document.body.appendChild(textarea)

    // Select and copy the text
    textarea.select()
    document.execCommand("copy")

    // Clean up and update state
    document.body.removeChild(textarea)
  }

  const handleImageClick = (e: MouseEvent<HTMLImageElement>) => {
    const target: HTMLImageElement = e.target
    let imageDimensions: DOMRect | [number, number] = target.getBoundingClientRect()

    const relativeCoordinates = [
      e.clientX - imageDimensions.left,
      e.clientY - imageDimensions.top,
    ]

    imageDimensions = [imageDimensions.width, imageDimensions.height].map(
      (dimension: number) => parseInt(dimension),
    )

    onImageClick({
      imageSrc: target.src,
      imageDimensions,
      relativeCoordinates,
    })
  }

  const handleUploadClick = () => {
    uploadInputRef.current?.click()
  }

  useEffect(() => {
    if (hexIsCopiedToClipboard) {
      setTimeout(() => {
        setHexIsCopiedToClipboard(false)
      }, 5000)
    }
    if (RGBIsCopiedToClipboard) {
      setTimeout(() => {
        setRGBIsCopiedToClipboard(false)
      }, 5000)
    }
  }, [hexIsCopiedToClipboard, RGBIsCopiedToClipboard])

  useEffect(() => {
    if (file) {
      onUploadFile(file)
    }
  }, [file])

  return (
    <div className="flex min-h-screen flex-col bg-white">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="row bold text-xl mt-40 mb-16 gap-3">
        <div className="pointer" onClick={() => setActiveVariant("IMAGE")}>
          <UploadIconSvg />
        </div>
        <Image
          src="/assets/images/swatch.png"
          height={48}
          width={48}
          alt="Color Picker"
          onClick={() => setActiveVariant("DEFAULT")}
        />
      </div>

      <main className="flex-1 flex-col items-center justify-center py-8">
        <section className="row gap-16 max-h-[17.5rem]">
          {activeVariant === "IMAGE" && (
            <Image
              src={base64Img}
              height={400}
              width={500}
              style={{ maxHeight: "280px", maxWidth: "500px" }}
              alt="Uploaded Image"
              onClick={(e) => handleImageClick(e)}
            />
          )}
          {activeVariant === "DEFAULT" && (
            <SketchPicker
              color={activeHexColor}
              disableAlpha
              onChange={(color) => {
                setActiveHexColor(color.hex.toUpperCase())
                formatRGBString(color.rgb)
              }}
              className="scale-y-125 scale-x-125 ml-12"
            />
          )}
          <div>
            {/* Color Finder */}
            <div className="col-v gap-4">
              <div className="row-v">
                <div className="row gap-x-1.5">
                  <span className="rounded-full inline-block w-3 h-3 bg-red-100" />
                  <span className="rounded-full inline-block w-3 h-3 bg-yellow-100" />
                  <span className="rounded-full inline-block w-3 h-3 bg-green-100" />
                </div>
                <div className="text-center text-xs w-3/5 xl:mx-auto xl:pr-12">
                  Colors
                </div>
              </div>
              <div className="flex gap-3">
                <div
                  className="h-12 w-12 rounded-md"
                  style={{ backgroundColor: activeHexColor }}
                />
                <div className="border-2 rounded-md row-v justify-between md:min-w-62 px-1.5">
                  <span>HEX: {activeHexColor}</span>
                  {!hexIsCopiedToClipboard ? (
                    <CopyToClipboardSvg onClickFunction={(e) => copyToClipboard(e)} />
                  ) : (
                    <CorrectIconSvg />
                  )}
                </div>
              </div>
              <div className="flex gap-3">
                <div
                  className="h-12 w-12 rounded-md"
                  style={{ backgroundColor: activeHexColor }}
                />
                <div className="border-2 rounded-md row-v justify-between md:min-w-62 px-1.5">
                  <span>RGB: {activeRGB}</span>
                  {!RGBIsCopiedToClipboard ? (
                    <CopyToClipboardSvg onClickFunction={(e) => copyToClipboard(e)} />
                  ) : (
                    <CorrectIconSvg />
                  )}
                </div>
              </div>
            </div>
            {/* Image uploader menu */}
            <div className="mt-6 row upload-container">
              <input
                ref={uploadInputRef}
                id="file-upload"
                type="file"
                accept="image/*"
                onChange={(e) => setFile(e.target.files![0] as unknown as string)}
                className="hidden"
              />
              <p className="mt-2 text-gray-500 text-xs truncate">
                {file === "" ? "No file selected" : (file as File).name}
              </p>
              {activeVariant === "IMAGE" && (
                <Button onClick={handleUploadClick}>Use your image</Button>
              )}
            </div>
          </div>
        </section>
      </main>

      <Footer />
    </div>
  )
}

export default Home
